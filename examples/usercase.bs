if (true || error("If wrong, should not exec second arg at ||")) { }
local c = false
if (false || true) { c = true }
if (!c) error("If wrong, ||, not doing second arg")

if (true && false) { error("If wrong, && 1") }
if (false && true) { error("If wrong, && 2") }

tbl = {}
tbl2 = {}
function tbl.a(){
	return function(){
		function tbl2.b(){
			return this.c
		}
		
		return tbl2
	}
}

tbl.a()().c = "good"
if (tbl.a()().b() != "good") error("Table set/call invalid!")

#set preproctestif jup
#define preprocdef "jup"

if (preprocdef != "jup") error("preprocessor define is invalid")
#if preproctestif != jup
	error("preprocessor if is invalid")
#end

local tbl = {}
for (local i = 0, i < 200, i++) tbl[i] = true
for (local i = 0, i < 200, i++) tbl[i] = null
if (#tbl != 0) error("Tbl Count or remove wrong: " + #tbl)


if (2 == 1) {error("else wrong")} else {}
if (3 == 1) {error("else if wrong")} elseif (2 + 2 == 4) {} else {error("else if wrong")}

local iftest = 0
if (1 == 1) {iftest += 1} else { error("if wrong") }
if (iftest != 1) { error("if wrong") }
if (3 == 1) {error("1 else if wrong")} elseif (2 + 2 == 4) {iftest += 1} else {error("2 else if wrong")}
if (iftest != 2) { error("3 else if wrong") }
if (3 == 1) {error("1 else if wrong")} elseif (2 + 2 == 4) {iftest += 1} else { error("2 else if wrong") }
if (iftest != 3) { error("else if else wrong") }

local backtest = false
function a(){
	error("goto function jump invalid")
	a:
	goto b
	error("goto function jump invalid")
}

function b(){
	goto a
	b:
	backtest = true
}
b()
if (!backtest) error("goto function jump invalid")

local labelcheck = false
goto label_after
error("goto invalid")

label_before:
labelcheck = true
label_after:

if (!labelcheck){
	goto label_before
	
	error("goto invalid")
}

#set a nottest
#set b test
#if a == test
	#if b == test
		error("Nested #ifs invalid")
	#end
#elseif a == nottest
	goto nestedif_escape
#end
error("Nested #ifs invalid")

nestedif_escape:


if (1 << 2 != 4) error("Bitwise left invalid")
if (2 >> 1 != 1) error("Bitwise right invalid")
if (1 | 2 != 3) error("Bitwise or invalid")
if (1 & 2 != 0) error("Bitwise and invalid")

if ("%b%" % {"a", "c"} != "abc") error("String formating failed")

if (#"strlen" != 6) error("# operator Invalid")
if (String.FromChar(97) != "a") error("FromChar Invalid")
if (String.IndexOf("mo", "o") != 1) error("IndexOf Invalid")
if (String.LastIndexOf("hellooo", "o") != 6) error("LastIndexOf Invalid")
if (String.Left("ape", 1) != "pe") error("Left Invalid")
if (String.Right("ape", 1) != "ap") error("Right Invalid")
if (String.Replace("ape", "e", "a") != "apa") error("Replace Invalid")
if (String.Split("a,b,c,d,e", ",")[2] != "c") error("Split Invalid")
if (String.Sub("ape", 1) != "pe") error("Sub Invalid")
if (String.Sub("ape", 1, 1) != "p") error("Sub Invalid")
if (String.ToChar("a") != 97) error("ToChar Invalid")
if (String.Trim(" a ") != "a") error("Trim Invalid")
if (String.Trim(". a. ", ". ") != "a") error("Trim2 Invalid")
if (String.TrimLeft(" a") != "a") error("TrimLeft Invalid")
if (String.TrimRight("a ") != "a") error("TrimRight Invalid")
if (String.TrimLeft(". a", ". ") != "a") error("TrimLeft2 Invalid")
if (String.TrimRight("a. ", ". ") != "a") error("TrimRight2 Invalid")

testfunc = function(){return "good"}
if (testfunc() != "good") error("anon function invalid!")

local numi = 0
function repfunc(){ numi++; return repfunc }
repfunc()()()()()
if (numi != 5) error("Repeat function invalid!")

local i = 0
while(i < 5){i++}
if (i != 5) error("while loop invalid or ++ OP invalid!")

for (local i = 0, i < 5, i++) {}
if (i != 5) error("while loop invalid or ++ OP invalid!")

local tmpnum = 0
foreach (k, v, {1, 2, 3, 4, 5}){ if (k == null || v == null) { error("foreach invalid") } tmpnum++ }
foreach (k, v, {a = 1, b = 2, c = 3, d = 4, e = 5}){ if (k == null || v == null) error("foreach indexed invalid") }

if (tmpnum != 5) {
	error("foreach loop count invalid")
}

local tbl = {}
tbl.b = {}
tbl.b.b = {}
tbl.b.b.a = function() {
	return "world"
}
if (tbl.b.b.a() != "world") error("Table set/call invalid!")

tbl = {
	a = "test",
	b = "test",
	c = "test"
}

if (!tbl["a"] || !tbl["b"] || !tbl["c"] || (tbl["c"] != "test")) error("Table init invalid")

local tbl = {1,2,3,4,5}
tbl[2] = null
foreach(k, v, tbl){if (k == 2) error("Tbl index remove failed!")}

function ret3(a, b, c){ return "G" * (a + b + c) }
if (ret3(1, 1, 1) != "GGG") error("func call or str mult invalid")

local enumtest = enum {
	zero,
	one,
	two = 2,
	three
}
if (enumtest.one != 1) error("Enum wrong")

local tbl = {}
function tbl.key(num) {
	return num + 1
}
tbl[tbl.key(1)] = true
if (!tbl[2]) error("Table set index with function call invalid")


function reftest(number &num, number num2) {
	num++
	num2++
}

local number a = 0
local number b = 0
reftest(a, b)
if (a == 0) error("Function param by reference invalid")
if (b == 1) error("Function param by value invalid")

local veca = new Vector(-1, -1, -1)
if (veca.x != -1) error("userdata vector test member ctor invalid")

veca.x +=  1
if (veca.x != 0) error("userdata vector test member++ invalid")
veca.x -= 1

local vecb = new Vector(2, 2, 2)
local vecc = veca + vecb
if (vecc.x != 1) error("userdata vector test + operator invalid")

print("All tests passed!")
